minispade.register('run', "(function() {(function() {\n\n  window.App = Ember.Application.create({\n    rootElement: '#application'\n  });\n\n  App.MetricsRenderer = function(controller) {\n    this.controller = controller;\n    return this;\n  };\n\n  App.MetricsRenderer.prototype = $.extend(new Log.Listener, {\n    stop: function(log) {\n      var avg, key, metric, metrics;\n      metrics = log.metrics.summary();\n      metrics = (function() {\n        var _results;\n        _results = [];\n        for (key in metrics) {\n          metric = metrics[key];\n          avg = parseFloat(Math.round(metric.avg * 100) / 100).toFixed(4);\n          _results.push(\"\" + key + \": count: \" + metric.count + \" avg: \" + avg);\n        }\n        return _results;\n      })();\n      return this.controller.set('metrics', metrics);\n    }\n  });\n\n  App.Runner = Em.Object.extend({\n    logs: {},\n    start: function(controller, options) {\n      console.log('Start, options: ', options);\n      this.set('running', true);\n      this.controller = controller;\n      this.options = options;\n      this.reset();\n      return this.fetch(this.handle);\n    },\n    stop: function() {\n      return this.set('running', false);\n    },\n    fetch: function(handler) {\n      var url,\n        _this = this;\n      url = \"https://api.travis-ci.org/jobs/\" + this.options.jobId + \"/log.txt\";\n      if (this.logs[url]) {\n        return handler.call(this, this.logs[url]);\n      } else {\n        this.set('loading', true);\n        return $.get(url, function(log) {\n          if (_this.options.folds) {\n            log = _this.addFolds(log);\n          }\n          _this.set('loading', false);\n          _this.logs[url] = log;\n          return handler.call(_this, log);\n        });\n      }\n    },\n    handle: function(string) {\n      var part, parts, _i, _len;\n      if (this.options.partition || this.options.randomize) {\n        parts = this.split(string);\n        if (this.options.stream) {\n          return this.stream(parts);\n        } else {\n          for (_i = 0, _len = parts.length; _i < _len; _i++) {\n            part = parts[_i];\n            this.receive(part[0], part[1]);\n          }\n          return this.stop();\n        }\n      } else {\n        this.receive(0, string);\n        return this.stop();\n      }\n    },\n    receive: function(ix, line) {\n      if (this.get('running')) {\n        return this.log.set(ix, line);\n      }\n    },\n    addFolds: function(log) {\n      log = log.replace(/(\\n)(?=\\$ bundle install)/m, \"\\nfold:start:bundle_install\\x1B\\[K\\n\");\n      log = log.replace(/(Your bundle is complete[^\\n]*)($)/m, \"$1\\nfold:end:bundle_install\\x1B\\[K\\n\");\n      return log;\n    },\n    stream: function(parts) {\n      var part, wait, _i, _len,\n        _this = this;\n      wait = 0;\n      for (_i = 0, _len = parts.length; _i < _len; _i++) {\n        part = parts[_i];\n        setTimeout((function() {\n          return _this.receive.apply(_this, arguments);\n        }), wait += this.options.interval, part[0], part[1]);\n      }\n      return setTimeout((function() {\n        return _this.stop();\n      }), wait);\n    },\n    reset: function() {\n      var log;\n      this.clear();\n      log = new Log;\n      log.listeners.push(new Log.Instrumenter);\n      log.listeners.push(new Log.Folds);\n      log.listeners.push(new Log.Log);\n      log.listeners.push(new App.MetricsRenderer(this.controller));\n      log.listeners.push(new Log[this.options.renderer]);\n      return this.log = this.options.buffer && new Log.Buffer(log) || log;\n    },\n    clear: function() {\n      $('#log').empty();\n      return $('#events').empty();\n    },\n    split: function(string) {\n      var i, line, lines, parts;\n      string = string.replace(/\\r\\n/gm, \"\\n\");\n      lines = string.split(/^/m);\n      parts = (function() {\n        var _i, _len, _results;\n        _results = [];\n        for (i = _i = 0, _len = lines.length; _i < _len; i = ++_i) {\n          line = lines[i];\n          _results.push([i, line]);\n        }\n        return _results;\n      })();\n      if (this.options.slice) {\n        parts = this.slice(parts);\n      }\n      if (this.options.randomize) {\n        parts = this.randomize(parts);\n      }\n      return parts;\n    },\n    slice: function(array) {\n      return array.slice(0, this.options.slice);\n    },\n    partition: function(parts) {\n      var count, i, joined, part, split, step, _, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _step, _step1;\n      step = this.rand(10);\n      _ref = Array.prototype.slice.apply(parts);\n      for (i = _i = 0, _len = _ref.length, _step = step; _i < _len; i = _i += _step) {\n        _ = _ref[i];\n        if (this.rand(10) > 7.5) {\n          split = this.splitRand(parts[i][1], 5).map(function(chunk) {\n            return [0, chunk];\n          });\n          parts.splice.apply(parts, [i, 1].concat(split));\n        }\n      }\n      _ref1 = Array.prototype.slice.apply(parts);\n      for (i = _j = 0, _len1 = _ref1.length, _step1 = step; _j < _len1; i = _j += _step1) {\n        _ = _ref1[i];\n        if (this.rand(10) > 7.5) {\n          count = this.rand(10);\n          joined = '';\n          _ref2 = parts.slice(i, count);\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            part = _ref2[_k];\n            joined += part[1];\n          }\n          parts.splice(i, count, joined);\n        }\n      }\n      return this.renumber(parts);\n    },\n    renumber: function(parts) {\n      var i, num, _, _i, _len;\n      num = 0;\n      for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {\n        _ = parts[i];\n        parts[i][0] = num += 1;\n      }\n      return parts;\n    },\n    randomize: function(array, step) {\n      var i, _, _i, _len, _step;\n      for (i = _i = 0, _len = array.length, _step = step || 10; _i < _len; i = _i += _step) {\n        _ = array[i];\n        this.shuffle(array, i, step || 10);\n      }\n      return array;\n    },\n    splitRand: function(string, count) {\n      var size, split;\n      size = (string.length / count) * 1.5;\n      split = [];\n      while (string.length > 0) {\n        count = this.rand(size) + 1;\n        split.push(string.slice(0, count));\n        string = string.slice(count);\n      }\n      return split;\n    },\n    rand: function(num) {\n      return Math.floor(Math.random() * num);\n    },\n    shuffle: function(array, start, count) {\n      var i, j, tmp, _, _i, _len, _ref, _results;\n      _ref = array.slice(start, start + count);\n      _results = [];\n      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {\n        _ = _ref[i];\n        j = start + this.rand(i + 1);\n        i = start + i;\n        tmp = array[i];\n        array[i] = array[j];\n        _results.push(array[j] = tmp);\n      }\n      return _results;\n    }\n  });\n\n  App.ApplicationController = Em.Controller.extend({\n    jobId: 4767279,\n    randomize: true,\n    partition: true,\n    slice: 500,\n    stream: false,\n    buffer: false,\n    folds: true,\n    interval: 10,\n    runningBinding: 'runner.running',\n    loadingBinding: 'runner.loading',\n    renderers: [\n      Em.Object.create({\n        name: 'FragmentRenderer'\n      }), Em.Object.create({\n        name: 'JqueryRenderer'\n      })\n    ],\n    init: function() {\n      this._super.apply(this, arguments);\n      return this.set('runner', App.Runner.create());\n    },\n    start: function() {\n      return this.get('runner').start(this, {\n        jobId: this.get('jobId'),\n        slice: parseInt(this.get('slice')),\n        interval: parseInt(this.get('interval')),\n        stream: this.get('stream'),\n        buffer: this.get('buffer'),\n        folds: this.get('folds'),\n        randomize: this.get('randomize'),\n        partition: this.get('partition'),\n        renderer: this.get('renderer')\n      });\n    },\n    stop: function() {\n      return this.get('runner').stop();\n    },\n    toggleText: (function() {\n      if (this.get('running')) {\n        return 'Stop';\n      } else {\n        return 'Start';\n      }\n    }).property('running'),\n    toggle: function() {\n      return this.get('running') && this.stop() || this.start();\n    },\n    clear: function() {\n      return this.get('runner').clear();\n    }\n  });\n\n  $(function() {\n    $('#log').on('mouseenter', 'a', function() {\n      var num, url;\n      num = $(this.parentNode).prevAll('p').length + 1;\n      url = window.location + '';\n      return $(this).attr('href', url.replace(/#L\\d+|(?=\\?)|$/, '#L' + num));\n    });\n    return $('#log').on('click', '.fold-start + p', function() {\n      return $(this).prev().toggleClass('open');\n    });\n  });\n\n}).call(this);\n\n})();\n//@ sourceURL=run");